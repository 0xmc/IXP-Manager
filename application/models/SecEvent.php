<?php

/*
 * Copyright (C) 2009-2011 Internet Neutral Exchange Association Limited.
 * All Rights Reserved.
 * 
 * This file is part of IXP Manager.
 * 
 * IXP Manager is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation, version v2.0 of the License.
 * 
 * IXP Manager is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 * 
 * You should have received a copy of the GNU General Public License v2.0
 * along with IXP Manager.  If not, see:
 * 
 * http://www.gnu.org/licenses/gpl-2.0.html
 */


/**
 * SecEvent
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: SecEvent.php 446 2011-05-26 13:40:19Z barryo $
 */
/**
 *
 * Auto-generated Doctrine ORM File
 *
 * @category ORM
 * @package IXP_ORM_Models
 * @copyright Copyright 2008 - 2010 Internet Neutral Exchange Association Limited <info (at) inex.ie>
 * @author Barry O'Donovan <barryo (at) inex.ie>
 */
class SecEvent extends BaseSecEvent
{

    const TYPE_SECURITY_VIOLATION     = 'SECURITY_VIOLATION';
    const TYPE_PORT_UPDOWN            = 'PORT_UPDOWN';
    const TYPE_LINEPROTO_UPDOWN       = 'LINEPROTO_UPDOWN';
    const TYPE_BGP_AUTH               = 'BGP_AUTH';

    public static $TYPES_DEFAULTS = array(
        self::TYPE_BGP_AUTH           => 1,
        self::TYPE_PORT_UPDOWN        => 1,
        self::TYPE_SECURITY_VIOLATION => 1
    );

    public function setUp()
    {
        parent::setUp();

        $this->hasOne( 'Cust',        array( 'local' => 'custid',       'foreign' => 'id' ) );
        $this->hasOne( 'SwitchTable', array( 'local' => 'switchid',     'foreign' => 'id' ) );
        $this->hasOne( 'Switchport',  array( 'local' => 'switchportid', 'foreign' => 'id' ) );

        $timestampable0 = new Doctrine_Template_Timestampable(
            array(
                'created' =>
                    array(
                        'name' => 'timestamp',
                    ),
                'updated' =>
                    array(
                        'disabled' => true
                    )
            )
        );

        $this->actAs( $timestampable0 );
    }

}