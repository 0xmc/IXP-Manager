<?php

/*
 * Copyright (C) 2009-2011 Internet Neutral Exchange Association Limited.
 * All Rights Reserved.
 * 
 * This file is part of IXP Manager.
 * 
 * IXP Manager is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation, version v2.0 of the License.
 * 
 * IXP Manager is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 * 
 * You should have received a copy of the GNU General Public License v2.0
 * along with IXP Manager.  If not, see:
 * 
 * http://www.gnu.org/licenses/gpl-2.0.html
 */


/**
 * MyPeeringMatrixTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
/**
 *
 * Auto-generated Doctrine ORM File
 *
 * @category ORM
 * @package IXP_ORM_Models
 * @copyright Copyright 2008 - 2010 Internet Neutral Exchange Association Limited <info (at) inex.ie>
 * @author Barry O'Donovan <barryo (at) inex.ie>
 */
class MyPeeringMatrixTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object MyPeeringMatrixTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('MyPeeringMatrix');
    }


    /**
     * Calculate the totals for the various states on a per member basis
     *
     * Returns an array of the type:
     *
     * Array
     * (
     *     [YES] => 5
     *     [NO] => 32
     *     [WAITING] => 3
     *     [NEVER] => 5
     * )
     *
     * @param int The customer ID to find the statistics for
     * @return array The array as above.
     */
    public static function getStatesTotal( $custid, $vlan = null )
    {
        if( !ctype_digit( $custid ) )
            return array();

        $q = Doctrine_Query::create()
            ->from( 'MyPeeringMatrix mpm' )
            ->select( 'mpm.peered' )
            ->addSelect( 'COUNT( mpm.peered ) as count' )
            ->where( 'mpm.custid = ?', $custid );

        if( $vlan !== null )
            $q->andWhere( 'mpm.vlan = ?', $vlan );

        $result = $q->groupBy( 'mpm.peered' )
               ->execute( null, Doctrine_Core::HYDRATE_ARRAY );

        $totals = array();
        foreach( $result as $r )
            $totals[$r['peered']] = $r['count'];

        return $totals;
    }

    /**
     * Generates or updates the users My Peering Matrix table
     *
     * Uses the public peering matrix tables as its source
     *
     * @param int $custid The customer ID to generate / update for
     */
    public function generateOrUpdateMyPeeringMatrix( $custid = false )
    {
        if( !$custid )
            throw new INEX_Exception( 'You must provide a customer id!' );

        // let's create / update the users own peering matrix
        // we'll use the potential peers as given the the peering matrix table

        $matrix = Doctrine_Query::create()
            ->from( 'PeeringMatrix pm' )
            ->where( 'pm.x_custid = ?', $custid )
            ->fetchArray();

        $mypeers = Doctrine_Query::create()
            ->from( 'MyPeeringMatrix mpm' )
            ->where( 'mpm.custid = ?', $custid )
            ->execute( null, Doctrine_Core::HYDRATE_RECORD );

        foreach( $matrix as $r )
        {
            $found = false;
            foreach( $mypeers as $index => $mp )
            {
                if( $mp['peerid'] == $r['y_custid'] && $mp['vlan'] == $r['vlan'] )
                {
                    unset( $mypeers[$index] );
                    $found = true;
                    continue;
                }
            }

            if( !$found )
            {
                $newpeer = new MyPeeringMatrix();
                $newpeer['custid']    = $custid;
                $newpeer['peerid']    = $r['y_custid'];
                $newpeer['vlan']      = $r['vlan'];
                $newpeer['peered']    = 'NO';
                $newpeer['ipv6']      = 0;
                $newpeer['updated']   = date( 'Y-m-d H:i:s' );
                $newpeer['created']   = date( 'Y-m-d H:i:s' );

                // is there a pre-existing notes entry for these peers?
                $n = Doctrine_Query::create()
                    ->from( 'MyPeeringMatrixNotes n' )
                    ->where( 'n.custid = ? and n.peerid = ?' )
                    ->fetchOne( array( $custid, $r['y_custid'] ), Doctrine_Core::HYDRATE_RECORD );

                if( $n )
                    $newpeer['notes_id'] = $n['id'];

                $newpeer->save();
            }
        }

        // let's delete any members that no longer exist
        foreach( $mypeers as $mp )
            $mp->delete();
    }

}