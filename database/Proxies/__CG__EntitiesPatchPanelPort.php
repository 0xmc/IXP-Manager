<?php

namespace Proxies\__CG__\Entities;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class PatchPanelPort extends \Entities\PatchPanelPort implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Entities\\PatchPanelPort' . "\0" . 'number', '' . "\0" . 'Entities\\PatchPanelPort' . "\0" . 'state', '' . "\0" . 'Entities\\PatchPanelPort' . "\0" . 'colo_circuit_ref', '' . "\0" . 'Entities\\PatchPanelPort' . "\0" . 'ticket_ref', '' . "\0" . 'Entities\\PatchPanelPort' . "\0" . 'notes', '' . "\0" . 'Entities\\PatchPanelPort' . "\0" . 'assigned_at', '' . "\0" . 'Entities\\PatchPanelPort' . "\0" . 'connected_at', '' . "\0" . 'Entities\\PatchPanelPort' . "\0" . 'cease_requested_at', '' . "\0" . 'Entities\\PatchPanelPort' . "\0" . 'ceased_at', '' . "\0" . 'Entities\\PatchPanelPort' . "\0" . 'last_state_change', '' . "\0" . 'Entities\\PatchPanelPort' . "\0" . 'internal_use', '' . "\0" . 'Entities\\PatchPanelPort' . "\0" . 'chargeable', '' . "\0" . 'Entities\\PatchPanelPort' . "\0" . 'id', '' . "\0" . 'Entities\\PatchPanelPort' . "\0" . 'switchPort', '' . "\0" . 'Entities\\PatchPanelPort' . "\0" . 'patchPanelPortHistory', '' . "\0" . 'Entities\\PatchPanelPort' . "\0" . 'patchPanel', '' . "\0" . 'Entities\\PatchPanelPort' . "\0" . 'customer', '' . "\0" . 'Entities\\PatchPanelPort' . "\0" . 'duplexSlavePorts', '' . "\0" . 'Entities\\PatchPanelPort' . "\0" . 'duplexMasterPort'];
        }

        return ['__isInitialized__', '' . "\0" . 'Entities\\PatchPanelPort' . "\0" . 'number', '' . "\0" . 'Entities\\PatchPanelPort' . "\0" . 'state', '' . "\0" . 'Entities\\PatchPanelPort' . "\0" . 'colo_circuit_ref', '' . "\0" . 'Entities\\PatchPanelPort' . "\0" . 'ticket_ref', '' . "\0" . 'Entities\\PatchPanelPort' . "\0" . 'notes', '' . "\0" . 'Entities\\PatchPanelPort' . "\0" . 'assigned_at', '' . "\0" . 'Entities\\PatchPanelPort' . "\0" . 'connected_at', '' . "\0" . 'Entities\\PatchPanelPort' . "\0" . 'cease_requested_at', '' . "\0" . 'Entities\\PatchPanelPort' . "\0" . 'ceased_at', '' . "\0" . 'Entities\\PatchPanelPort' . "\0" . 'last_state_change', '' . "\0" . 'Entities\\PatchPanelPort' . "\0" . 'internal_use', '' . "\0" . 'Entities\\PatchPanelPort' . "\0" . 'chargeable', '' . "\0" . 'Entities\\PatchPanelPort' . "\0" . 'id', '' . "\0" . 'Entities\\PatchPanelPort' . "\0" . 'switchPort', '' . "\0" . 'Entities\\PatchPanelPort' . "\0" . 'patchPanelPortHistory', '' . "\0" . 'Entities\\PatchPanelPort' . "\0" . 'patchPanel', '' . "\0" . 'Entities\\PatchPanelPort' . "\0" . 'customer', '' . "\0" . 'Entities\\PatchPanelPort' . "\0" . 'duplexSlavePorts', '' . "\0" . 'Entities\\PatchPanelPort' . "\0" . 'duplexMasterPort'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (PatchPanelPort $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setNumber($number)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNumber', [$number]);

        return parent::setNumber($number);
    }

    /**
     * {@inheritDoc}
     */
    public function getNumber()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNumber', []);

        return parent::getNumber();
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function getPrefix()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPrefix', []);

        return parent::getPrefix();
    }

    /**
     * {@inheritDoc}
     */
    public function setState($state)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setState', [$state]);

        return parent::setState($state);
    }

    /**
     * {@inheritDoc}
     */
    public function getState()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getState', []);

        return parent::getState();
    }

    /**
     * {@inheritDoc}
     */
    public function setColoCircuitRef(string $colo_circuit_ref): \Entities\PatchPanelPort
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setColoCircuitRef', [$colo_circuit_ref]);

        return parent::setColoCircuitRef($colo_circuit_ref);
    }

    /**
     * {@inheritDoc}
     */
    public function getColoCircuitRef()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getColoCircuitRef', []);

        return parent::getColoCircuitRef();
    }

    /**
     * {@inheritDoc}
     */
    public function setTicketRef(string $ticket_ref): \Entities\PatchPanelPort
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTicketRef', [$ticket_ref]);

        return parent::setTicketRef($ticket_ref);
    }

    /**
     * {@inheritDoc}
     */
    public function getTicketRef()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTicketRef', []);

        return parent::getTicketRef();
    }

    /**
     * {@inheritDoc}
     */
    public function setNotes($notes)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNotes', [$notes]);

        return parent::setNotes($notes);
    }

    /**
     * {@inheritDoc}
     */
    public function getNotes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNotes', []);

        return parent::getNotes();
    }

    /**
     * {@inheritDoc}
     */
    public function setAssignedAt($assignedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAssignedAt', [$assignedAt]);

        return parent::setAssignedAt($assignedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getAssignedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAssignedAt', []);

        return parent::getAssignedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function getAssignedAtFormated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAssignedAtFormated', []);

        return parent::getAssignedAtFormated();
    }

    /**
     * {@inheritDoc}
     */
    public function setConnectedAt($connectedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setConnectedAt', [$connectedAt]);

        return parent::setConnectedAt($connectedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getConnectedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getConnectedAt', []);

        return parent::getConnectedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function getConnectedAtFormated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getConnectedAtFormated', []);

        return parent::getConnectedAtFormated();
    }

    /**
     * {@inheritDoc}
     */
    public function setCeaseRequestedAt($ceaseRequestedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCeaseRequestedAt', [$ceaseRequestedAt]);

        return parent::setCeaseRequestedAt($ceaseRequestedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCeaseRequestedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCeaseRequestedAt', []);

        return parent::getCeaseRequestedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function getCeaseRequestedAtFormated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCeaseRequestedAtFormated', []);

        return parent::getCeaseRequestedAtFormated();
    }

    /**
     * {@inheritDoc}
     */
    public function setCeasedAt($ceasedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCeasedAt', [$ceasedAt]);

        return parent::setCeasedAt($ceasedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCeasedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCeasedAt', []);

        return parent::getCeasedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function getCeasedAtFormated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCeasedAtFormated', []);

        return parent::getCeasedAtFormated();
    }

    /**
     * {@inheritDoc}
     */
    public function setLastStateChange($lastStateChange)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastStateChange', [$lastStateChange]);

        return parent::setLastStateChange($lastStateChange);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastStateChange()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastStateChange', []);

        return parent::getLastStateChange();
    }

    /**
     * {@inheritDoc}
     */
    public function getLastStateChangeFormated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastStateChangeFormated', []);

        return parent::getLastStateChangeFormated();
    }

    /**
     * {@inheritDoc}
     */
    public function setInternalUse($internalUse)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setInternalUse', [$internalUse]);

        return parent::setInternalUse($internalUse);
    }

    /**
     * {@inheritDoc}
     */
    public function getInternalUse()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInternalUse', []);

        return parent::getInternalUse();
    }

    /**
     * {@inheritDoc}
     */
    public function getInternalUseInt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInternalUseInt', []);

        return parent::getInternalUseInt();
    }

    /**
     * {@inheritDoc}
     */
    public function getInternalUseText()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInternalUseText', []);

        return parent::getInternalUseText();
    }

    /**
     * {@inheritDoc}
     */
    public function setChargeable($chargeable)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setChargeable', [$chargeable]);

        return parent::setChargeable($chargeable);
    }

    /**
     * {@inheritDoc}
     */
    public function getChargeable()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChargeable', []);

        return parent::getChargeable();
    }

    /**
     * {@inheritDoc}
     */
    public function getChargeableInt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChargeableInt', []);

        return parent::getChargeableInt();
    }

    /**
     * {@inheritDoc}
     */
    public function getChargeableText()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChargeableText', []);

        return parent::getChargeableText();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setSwitchPort(\Entities\SwitchPort $switchPort = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSwitchPort', [$switchPort]);

        return parent::setSwitchPort($switchPort);
    }

    /**
     * {@inheritDoc}
     */
    public function getSwitchPort()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSwitchPort', []);

        return parent::getSwitchPort();
    }

    /**
     * {@inheritDoc}
     */
    public function getSwitchPortId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSwitchPortId', []);

        return parent::getSwitchPortId();
    }

    /**
     * {@inheritDoc}
     */
    public function getSwitchPortName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSwitchPortName', []);

        return parent::getSwitchPortName();
    }

    /**
     * {@inheritDoc}
     */
    public function addPatchPanelPortHistory(\Entities\PatchPanelPortHistory $patchPanelPortHistory)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPatchPanelPortHistory', [$patchPanelPortHistory]);

        return parent::addPatchPanelPortHistory($patchPanelPortHistory);
    }

    /**
     * {@inheritDoc}
     */
    public function removePatchPanelPortHistory(\Entities\PatchPanelPortHistory $patchPanelPortHistory)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removePatchPanelPortHistory', [$patchPanelPortHistory]);

        return parent::removePatchPanelPortHistory($patchPanelPortHistory);
    }

    /**
     * {@inheritDoc}
     */
    public function getPatchPanelPortHistory()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPatchPanelPortHistory', []);

        return parent::getPatchPanelPortHistory();
    }

    /**
     * {@inheritDoc}
     */
    public function getHistoryCount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHistoryCount', []);

        return parent::getHistoryCount();
    }

    /**
     * {@inheritDoc}
     */
    public function addDuplexSlavePort(\Entities\PatchPanelPort $duplexSlavePort)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addDuplexSlavePort', [$duplexSlavePort]);

        return parent::addDuplexSlavePort($duplexSlavePort);
    }

    /**
     * {@inheritDoc}
     */
    public function removeDuplexSlavePort(\Entities\PatchPanelPort $duplexSlavePort)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeDuplexSlavePort', [$duplexSlavePort]);

        return parent::removeDuplexSlavePort($duplexSlavePort);
    }

    /**
     * {@inheritDoc}
     */
    public function getDuplexSlavePorts()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDuplexSlavePorts', []);

        return parent::getDuplexSlavePorts();
    }

    /**
     * {@inheritDoc}
     */
    public function hasSlavePort(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasSlavePort', []);

        return parent::hasSlavePort();
    }

    /**
     * {@inheritDoc}
     */
    public function getDuplexSlavePort()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDuplexSlavePort', []);

        return parent::getDuplexSlavePort();
    }

    /**
     * {@inheritDoc}
     */
    public function getDuplexSlavePortName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDuplexSlavePortName', []);

        return parent::getDuplexSlavePortName();
    }

    /**
     * {@inheritDoc}
     */
    public function getDuplexSlavePortId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDuplexSlavePortId', []);

        return parent::getDuplexSlavePortId();
    }

    /**
     * {@inheritDoc}
     */
    public function setDuplexMasterPort(\Entities\PatchPanelPort $duplexMasterPort = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDuplexMasterPort', [$duplexMasterPort]);

        return parent::setDuplexMasterPort($duplexMasterPort);
    }

    /**
     * {@inheritDoc}
     */
    public function getDuplexMasterPort()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDuplexMasterPort', []);

        return parent::getDuplexMasterPort();
    }

    /**
     * {@inheritDoc}
     */
    public function setPatchPanel(\Entities\PatchPanel $patchPanel = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPatchPanel', [$patchPanel]);

        return parent::setPatchPanel($patchPanel);
    }

    /**
     * {@inheritDoc}
     */
    public function getPatchPanel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPatchPanel', []);

        return parent::getPatchPanel();
    }

    /**
     * {@inheritDoc}
     */
    public function setCustomer(\Entities\Customer $customer = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCustomer', [$customer]);

        return parent::setCustomer($customer);
    }

    /**
     * {@inheritDoc}
     */
    public function getCustomer()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCustomer', []);

        return parent::getCustomer();
    }

    /**
     * {@inheritDoc}
     */
    public function getCustomerId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCustomerId', []);

        return parent::getCustomerId();
    }

    /**
     * {@inheritDoc}
     */
    public function getSwitchId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSwitchId', []);

        return parent::getSwitchId();
    }

    /**
     * {@inheritDoc}
     */
    public function getSwitchName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSwitchName', []);

        return parent::getSwitchName();
    }

    /**
     * {@inheritDoc}
     */
    public function getCustomerName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCustomerName', []);

        return parent::getCustomerName();
    }

    /**
     * {@inheritDoc}
     */
    public function isAvailableForUse(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isAvailableForUse', []);

        return parent::isAvailableForUse();
    }

    /**
     * {@inheritDoc}
     */
    public function setDuplexPort($duplexPort, $newSlavePort)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDuplexPort', [$duplexPort, $newSlavePort]);

        return parent::setDuplexPort($duplexPort, $newSlavePort);
    }

    /**
     * {@inheritDoc}
     */
    public function resolveStates(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'resolveStates', []);

        return parent::resolveStates();
    }

    /**
     * {@inheritDoc}
     */
    public function getCustomerForASwitchPort()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCustomerForASwitchPort', []);

        return parent::getCustomerForASwitchPort();
    }

    /**
     * {@inheritDoc}
     */
    public function isDuplexPort(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isDuplexPort', []);

        return parent::isDuplexPort();
    }

    /**
     * {@inheritDoc}
     */
    public function resetPatchPanelPort()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'resetPatchPanelPort', []);

        return parent::resetPatchPanelPort();
    }

    /**
     * {@inheritDoc}
     */
    public function createHistory()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'createHistory', []);

        return parent::createHistory();
    }

}
