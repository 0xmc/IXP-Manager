<?php

/*
 * Copyright (C) 2009 - 2020 Internet Neutral Exchange Association Company Limited By Guarantee.
 * All Rights Reserved.
 *
 * This file is part of IXP Manager.
 *
 * IXP Manager is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation, version v2.0 of the License.
 *
 * IXP Manager is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GpNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License v2.0
 * along with IXP Manager.  If not, see:
 *
 * http://www.gnu.org/licenses/gpl-2.0.html
 */

namespace Repositories;

//use DateTime;
use Carbon\Carbon;

use Doctrine\ORM\EntityRepository;

use Illuminate\Support\Arr;
use IXP\Services\Grapher\Graph;

/**
 * TrafficDailyPhysInt
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TrafficDailyPhysInt extends EntityRepository
{
    
    /**
     * Return an array of traffic data (joined with the customer record) for
     * a given day and category.
     *
     * For example:
     *
     *     array(55) {
     *          0 => array:8 [
     *              "cid" => 1,
     *              "cname" => "ABC Ltd"
     *              "vname" => "INEX LAN1"
     *              "viid" => 1,
     *              "switch" => "swi1-kcp1-1"
     *              "in" => "9929169056"
     *              "out" => "348408392"
     *              "num_ports_in_lag" => "5"
     *              "vi_speed" => "50000"
     *              "util" => "99.29"
     *              ],
     *          ...
     *      }
     *
     * @see \IXP_Mrtg::$CATEGORIES
     * @param \DateTime $day The day to load records for
     * @param string $category The category of records to load (one of \IXP_Mrtg::$CATEGORIES)
     * @param \Entities\IXP $ixp The IXP to load results for (or false)
     * @return array An array of all switch objects
     */
    public function load( $day, $category, $period, $vlan )
    {
        $period = Graph::processParameterPeriod( $period );

        $vlansql = "";
        if( $vlan ) {
            $vlansql = " AND v.id = :vlan";
        }

        $dql = "SELECT c.id AS cid, c.abbreviatedName AS cname, ANY_VALUE( v.name) as vname, ANY_VALUE( s.name ) as switch,
                        vi.id AS viid,
                        SUM( tdpi.{$period}_max_in ) AS in,
                        SUM( tdpi.{$period}_max_out ) AS out,
                        COUNT( pi.id ) AS num_ports_in_lag,
                        SUM( pi.speed ) AS vi_speed,
                        ROUND( GREATEST( (MAX( tdpi.{$period}_max_in )/1000000/MAX( pi.speed ))*100, (MAX( tdpi.{$period}_max_out )/1000000/MAX( pi.speed ))*100 ), 2) AS util

                    FROM Entities\TrafficDailyPhysInt tdpi
                        LEFT JOIN tdpi.PhysicalInterface pi 
                        LEFT JOIN pi.VirtualInterface vi 
                        LEFT JOIN vi.Customer c 
                        LEFT JOIN vi.VlanInterfaces vli
                        LEFT JOIN vli.Vlan v
                        LEFT JOIN pi.SwitchPort sp
                        LEFT JOIN sp.Switcher s

                    WHERE tdpi.day = :day AND tdpi.category = :cat {$vlansql}
                    
                    GROUP BY vi.id
                    
                    ORDER BY util DESC";

        $q = $this->getEntityManager()->createQuery( $dql )
            ->setParameter( 'day', $day )
            ->setParameter( 'cat', $category );

        if( $vlan ) {
            $q->setParameter( 'vlan', $vlan );
        }

        return $q->getArrayResult();
    }

    /*
     * select

    and v.id in (2,3,10)

    group by vi.id

    order by util desc
     */


    /**
     * Delete all entries for a given day
     *
     * @param Carbon $day The day to delete all entries for
     * @return int The number of entries removed
     */
    public function deleteForDay( Carbon $day )
    {
        $dql = "DELETE \\Entities\\TrafficDailyPhysInt td WHERE td.day = :day";

        $q = $this->getEntityManager()->createQuery( $dql )
            ->setParameter( 'day', $day->format('Y-m-d') );

        return $q->execute();
    }


    /**
     * Get days for which stats are available
     *
     * @return array Array of strings of format yyyy-mm-dd
     */
    public function availableForDays(): array
    {
        return Arr::flatten( $this->getEntityManager()->createQuery(
                "SELECT DISTINCT td.day FROM \\Entities\\TrafficDailyPhysInt td ORDER BY td.day DESC"
            )->getScalarResult() );
    }


    /**
     * Delete all entries before a given day
     *
     * @param Carbon $day The day to delete all entries before
     * @return int The number of entries removed
     */
    public function deleteBefore( Carbon $day )
    {
        $dql = "DELETE \\Entities\\TrafficDailyPhysInt td WHERE td.day < :day";

        $q = $this->getEntityManager()->createQuery( $dql )
            ->setParameter( 'day', $day );

        return $q->execute();
    }


//    /**
//     * Get the given number of recent traffic stats for a given customer
//     *
//     * @param \Entities\Customer $customer The customer to get entries for
//     * @param int $rows The number of entries for fetch
//     * @param string $category The traffic category (bits, packets, etc)
//     * @return array The entries found
//     */
//    public function getAsArray( $customer, $rows, $category )
//    {
//        return $this->getEntityManager()->createQuery(
//                "SELECT td
//                 FROM Entities\\TrafficDaily td
//                 WHERE td.Customer = ?1 AND td.category = ?2
//                 ORDER BY td.day DESC"
//            )
//            ->setParameter( 1, $customer )
//            ->setParameter( 2, $category )
//            ->setMaxResults( $rows )
//            ->getArrayResult();
//    }
//
//    /**
//     * Get at most the given number of recent traffic stats for a given customer
//     * weekly (i.e. only every Tuesday)
//     *
//     * @param CustomerEntity $customer The customer to get entries for
//     * @param int $rows The number of entries for fetch
//     * @param string $category The traffic category (bits, packets, etc)
//     * @param DateTime $latest The date to start backwards from (weekly)
//     * @return array The entries found
//     */
//    public function getWeeklyAsArray( CustomerEntity $customer, int $rows, string $category, DateTime $latest ) {
//
//        $rsm = new ResultSetMappingBuilder( $this->getEntityManager() );
//        $rsm->addRootEntityFromClassMetadata('Entities\TrafficDaily', 'td');
//
//        return $this->getEntityManager()->createNativeQuery(
//            "SELECT " . $rsm->generateSelectClause() . "
//                 FROM traffic_daily td
//                 WHERE td.cust_id = ? AND td.category = ? AND td.day <= ? AND DATE_FORMAT(day,'%w') = DATE_FORMAT(?,'%w')
//                 ORDER BY td.day DESC LIMIT ?",
//            $rsm
//        )
//            ->setParameter( 1, $customer->getId() )
//            ->setParameter( 2, $category )
//            ->setParameter( 3, $latest->format('Y-m-d') )
//            ->setParameter( 4, $latest->format('Y-m-d') )
//            ->setParameter( 5, $rows )
//            ->getArrayResult();
//    }


}
